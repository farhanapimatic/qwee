/**
  * BibcodeQueryLib
  *
  * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
  */

;(function (angular) {
'use strict';

angular.module('BibcodeQueryLib')
    .factory('BibcodeQueryBindingController', ['$q',
        'Configuration',
        'Servers',
        'HttpClient',
        'APIHelper',
        'BaseController',
        BibcodeQueryBindingController
    ]);

    function BibcodeQueryBindingController($q, Configuration, Servers, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * @todo Add general description for this endpoint
             *
             * @param {string} bibcode TODO: type description here
             * @param {string} dbKey TODO: type description here
             * @param {string} dataType TODO: type description here
             *
             * @return {promise<returnBibcode>}
             */
            getBibcode: function (bibcode, dbKey, dataType) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.getBaseUri();
                var _queryBuilder = _baseUri + '/cgi-bin/nph-bib_query';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'bibcode': bibcode,
                    'db_key': dbKey,
                    'data_type': dataType
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json'
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'ReturnBibcode');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
